{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useState, useEffect } from 'react';\nexport default function useStats(url) {\n  var _useState = useState(),\n      stats = _useState[0],\n      setStats = _useState[1];\n\n  var _useState2 = useState(true),\n      loading = _useState2[0],\n      setLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      error = _useState3[0],\n      setError = _useState3[1];\n\n  useEffect(function () {\n    console.log('Mounting or updating');\n\n    function fetchData() {\n      var data;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              setLoading(true);\n              setError();\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(fetch(url).then(function (res) {\n                return res.json();\n              })[\"catch\"](function (err) {\n                setError(err);\n              }));\n\n            case 4:\n              data = _context.sent;\n              setStats(data);\n              setLoading(false);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }\n\n    fetchData();\n  }, [url]);\n  return {\n    stats: stats,\n    loading: loading,\n    error: error\n  };\n}","map":{"version":3,"sources":["C:/Users/Ouell/Documents/GitHub/rona/utils/useStats.js"],"names":["useState","useEffect","useStats","url","stats","setStats","loading","setLoading","error","setError","console","log","fetchData","fetch","then","res","json","err","data"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AAEA,eAAe,SAASC,QAAT,CAAkBC,GAAlB,EAAuB;AAAA,kBACTH,QAAQ,EADC;AAAA,MAC7BI,KAD6B;AAAA,MACtBC,QADsB;;AAAA,mBAELL,QAAQ,CAAC,IAAD,CAFH;AAAA,MAE7BM,OAF6B;AAAA,MAEpBC,UAFoB;;AAAA,mBAGTP,QAAQ,EAHC;AAAA,MAG7BQ,KAH6B;AAAA,MAGtBC,QAHsB;;AAIrCR,EAAAA,SAAS,CACR,YAAM;AACLS,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,aAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCL,cAAAA,UAAU,CAAC,IAAD,CAAV;AACAE,cAAAA,QAAQ;AAFT;AAAA,+CAGoBI,KAAK,CAACV,GAAD,CAAL,CAAWW,IAAX,CAAgB,UAACC,GAAD;AAAA,uBAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,eAAhB,WAA2C,UAACC,GAAD,EAAS;AACtER,gBAAAA,QAAQ,CAACQ,GAAD,CAAR;AACA,eAFkB,CAHpB;;AAAA;AAGOC,cAAAA,IAHP;AAMCb,cAAAA,QAAQ,CAACa,IAAD,CAAR;AACAX,cAAAA,UAAU,CAAC,KAAD,CAAV;;AAPD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AASAK,IAAAA,SAAS;AACT,GAbO,EAcR,CAAET,GAAF,CAdQ,CAAT;AAgBA,SAAO;AACNC,IAAAA,KAAK,EAALA,KADM;AAENE,IAAAA,OAAO,EAAPA,OAFM;AAGNE,IAAAA,KAAK,EAALA;AAHM,GAAP;AAKA","sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nexport default function useStats(url) {\r\n\tconst [ stats, setStats ] = useState();\r\n\tconst [ loading, setLoading ] = useState(true);\r\n\tconst [ error, setError ] = useState();\r\n\tuseEffect(\r\n\t\t() => {\r\n\t\t\tconsole.log('Mounting or updating');\r\n\t\t\tasync function fetchData() {\r\n\t\t\t\tsetLoading(true);\r\n\t\t\t\tsetError();\r\n\t\t\t\tconst data = await fetch(url).then((res) => res.json()).catch((err) => {\r\n\t\t\t\t\tsetError(err);\r\n\t\t\t\t});\r\n\t\t\t\tsetStats(data);\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t}\r\n\t\t\tfetchData();\r\n\t\t},\r\n\t\t[ url ],\r\n\t);\r\n\treturn {\r\n\t\tstats,\r\n\t\tloading,\r\n\t\terror,\r\n\t};\r\n}\r\n"]},"metadata":{},"sourceType":"module"}